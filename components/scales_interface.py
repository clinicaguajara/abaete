
# üì¶ IMPORTA√á√ïES NECESS√ÅRIAS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

import json 
import logging
import streamlit as st
import pandas    as pd

from typing                             import List, Dict
from datetime                           import date
from frameworks.sm                      import StateMachine
from utils.variables.session            import EvaluationStates, RedirectStates
from utils.load.context                 import is_professional_user
from services.links                     import load_links_for_professional
from services.scales                    import update_scale_status, load_assigned_scales, save_scale_assignment
from services.scales_progress           import load_scale_progress, save_scale_progress
from services.available_scales          import load_available_scales
from components.sidebar                 import render_sidebar


# üë®‚Äçüíª LOGGER ESPEC√çFICO PARA O M√ìDULO ATUAL ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

logger = logging.getLogger(__name__)


# üîå FUN√á√ÉO PARA RENDERIZAR A INTERFACE DE AVALIA√á√ïES (ENTRY POINT) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def scales_interface_entrypoint(auth_machine: StateMachine) -> tuple[None, str | None]:
    """
    <docstrings> Renderiza a interface da page "3_Avalia√ß√µes" com abas distintas para profissionais e pacientes.
    
    Args:
        auth_machine (StateMachine): M√°quina de estados com dados do usu√°rio autenticado.

    Calls:
        StateMachine("auth_redirect", True): Inicializa flag de redirecionamento | instanciado por frameworks.sm.StateMachine.
        render_abaete_header(): Renderiza cabe√ßalho padr√£o da aplica√ß√£o | definida em utils.design.
        is_professional_user(): Verifica perfil de usu√°rio | definida em utils.role.
        render_professional_scales(): Abre interface de escalas para profissionais | definida neste m√≥dulo.
        render_patient_scales(): Abre interface de escalas para pacientes | definida neste m√≥dulo.

    Returns:
        tuple[None, str | None]:
            - None: Se execu√ß√£o for bem-sucedida.
            - str | None: Mensagem de erro em caso de falha.

    """
    
    # üõ∞Ô∏è ESTABILIZA√á√ÉO PROATIVA DA INTERFACE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    
    # Cria uma inst√¢ncia da m√°quina de redirecionamento (default: True).
    redirect_machine = StateMachine("scales_redirect_state", RedirectStates.REDIRECT.value, enable_logging = True)
    
    # Se a m√°quina de redirecionamento estiver ligada...
    if redirect_machine.current:
        redirect_machine.to(RedirectStates.REDIRECTED.value, True) # ‚¨Ö Desativa a flag e for√ßa rerun().
    
    # ‚öôÔ∏è M√ÅQUINA DE ESCALAS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    
    # Define ou recupera a m√°quina de escalas (default: "start").
    scales_machine = StateMachine("scales_state", EvaluationStates.START.value)

    # üì∂ ROTEAMENTO CONFORME PAPEL DO USU√ÅRIO ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    # Se o usu√°rio possuir um perfil profissional registrado na m√°quina de autentica√ß√£o...
    if is_professional_user(auth_machine):
        _render_professional_scales(auth_machine, scales_machine) # ‚¨Ö Desenha a interface do profissional.
    
    # Caso contr√°rio...
    else:
        _render_patient_scales(auth_machine, scales_machine) # ‚¨Ö Desenha a interface do paciente.
    
    # Desenha a sidebar do aplicativo.
    render_sidebar(auth_machine)


# üì∫ FUN√á√ÉO PARA RENDERIZAR A INTERFACE DO PROFISSIONAL ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _render_professional_scales(auth_machine: StateMachine, scales_machine: StateMachine) -> None:
    """
    <docstrings> Renderiza a interface de escalas para profissionais.

    Args:
        auth_machine (StateMachine): M√°quina de estado com dados do usu√°rio profissional.
        state_machine (StateMachine): M√°quina de estado com dados da escalas.

    Calls:
        st.tabs(): Cria abas de navega√ß√£o | instanciado por streamlit.
        load_links_for_professional(): Carrega v√≠nculos ativos | definida em services.professional_patient_link.
        load_available_scales(): Carrega defini√ß√µes de escalas dispon√≠veis | definida em services.available_scales.
        save_scale_assignment(): Persiste atribui√ß√£o de escala | definida em services.scales.
        st.form(): Inicia formul√°rio | instanciado por streamlit.
        st.selectbox(), st.form_submit_button(): Controles de formul√°rio | instanciados por streamlit.
        st.success(), st.error(), st.info(): Feedback visual | instanciados por streamlit.

    Returns:
        tuple[None, str | None]:
            - None: Se execu√ß√£o for bem-sucedida.
            - str | None: Mensagem de erro em caso de falha.

    """

    # Desenha as abas do profissional.
    tabs = st.tabs(["Avalia√ß√µes", "Visualizar resultados", "Evolu√ß√£o"])

    # Dentro da primeira aba...
    with tabs[0]:

        # Desenha o cabe√ßalho da aba.
        st.markdown("<h4>Atribuir instrumentos</h4>", unsafe_allow_html=True)

        # Se n√£o houver v√≠nculos registrados na m√°quina de autentica√ß√£o...
        if not auth_machine.get_variable("professional_patient_links"):
            user_id = auth_machine.get_variable("user_id")       # ‚¨Ö Recupera o UUID do profissional.
            load_links_for_professional(user_id, auth_machine)   # ‚¨Ö Carrega os v√≠nculos via professional_id

        # Se n√£o houver escalas dispon√≠veis na m√°quina de escalas...
        if not scales_machine.get_variable("available_scales"):
            load_available_scales(scales_machine) # ‚¨Ö Corrigido: carregar na m√°quina correta

        # Recupera dados de links e escalas.
        links = auth_machine.get_variable("professional_patient_links", default=[])
        scales = scales_machine.get_variable("available_scales", default=[])

        # Filtra apenas links aceitos.
        active_links = [l for l in links if l.get("status") == "accepted"]
        if not active_links:
            st.info("‚ö†Ô∏è Nenhum paciente vinculado.")
            return None, None

        # Mapas para populamento de controles.
        names = [l["patient_name"] for l in active_links]
        links_map = {l["patient_name"]: l["id"] for l in active_links}
        scales_names = [e["scale_name"] for e in scales]
        scales_map = {e["scale_name"]: e["id"] for e in scales}

        # Formul√°rio de atribui√ß√£o.
        with st.form("form_atribuicao_escala"):
            nome = st.selectbox("Paciente", names)
            scale = st.selectbox("Escala", scales_names)
            feedback = st.empty()
            click = st.form_submit_button("Atribuir", use_container_width=True)

        # A√ß√£o de submiss√£o.
        if click:

            if scale not in scales_map:
                feedback.error("‚ùå Erro interno: escala selecionada n√£o foi encontrada.")
                return None, None

            payload = {
                "link_id": links_map[nome],
                "available_scale_id": scales_map[scale],
                "scale_name": scale,
                "status": "active"
            }
            done = save_scale_assignment(payload)

            if done == "created":
                feedback.success("‚úÖ Escala atribu√≠da com sucesso!")
            elif done == "duplicate_today":
                feedback.warning("‚ö†Ô∏è Esta escala j√° foi atribu√≠da ao paciente hoje.")
            else:
                feedback.error("‚ùå N√£o foi poss√≠vel atribuir a escala.")

    with tabs[1]:
        # Recupera o ID do v√≠nculo √∫nico.
        link_id = links[0]["id"]
        render_scale_progress_table(link_id, auth_machine)

    return None, None


# üì∫ FUN√á√ÉO PARA RENDERIZAR A INTERFACE DO PACIENTE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _render_patient_scales(auth_machine: StateMachine, scales_machine: StateMachine) -> None:
    """
    <docstrings> Renderiza a interface de escalas para pacientes com abas para responder, hist√≥rico e resumo.

    Args:
        auth_machine (StateMachine): M√°quina de estados com os dados do usu√°rio autenticado.
        state_machine (StateMachine): M√°quina de estados dedicada a dados de escalas.

    Calls:
        auth_machine.get_variable(): Recupera vari√°veis de estado do usu√°rio | instanciado por StateMachine.
        load_links_for_patient(): Carrega v√≠nculos do paciente | definida em services.professional_patient_link.py.
        st.tabs(): Cria conjunto de abas de navega√ß√£o | definida em streamlit.
        st.warning(): Exibe aviso de aus√™ncia de v√≠nculo | definida em streamlit.
        st.info(): Exibe mensagens informativas | definida em streamlit.
        render_scales(): Renderiza escalas pendentes para o paciente | definida em components.scales_interface.py.
        render_scale_progress_table(): Exibe tabela de progresso das escalas | definida em components.scales_interface.py.
        auth_machine.list_variables_with_prefix(): Filtra vari√°veis relacionadas a progresso | instanciado por StateMachine.
        st.write(): Exibe informa√ß√µes brutas no frontend | definida em streamlit.

    Returns:
        None.

    """

    # Recupera a lista de v√≠nculos do paciente.
    links = auth_machine.get_variable("links", default=[])

    # Se n√£o houver v√≠nculos, exibe mensagem informativa em todas as abas.
    if len(links) == 0:
        for tab in st.tabs(["Responder avalia√ß√µes", "Hist√≥rico", "Resumo"]):
            with tab:
                st.warning("‚ö†Ô∏è Nenhum profissional vinculado ao seu perfil.")
        return

    # Se houver m√∫ltiplos v√≠nculos, exibe mensagem informativa em todas as abas.
    if len(links) > 1:
        for tab in st.tabs(["Responder avalia√ß√µes", "Hist√≥rico", "Resumo"]):
            with tab:
                st.info("‚ÑπÔ∏è Essa funcionalidade ser√° implementada no futuro (v√°rios v√≠nculos detectados).")
        return

    # Recupera o primeiro item da lista de v√≠nculos.
    link_id = links[0]["id"]

    # Desenha as abas da sess√£o de avalia√ß√µes do paciente.
    tabs = st.tabs(["Responder avalia√ß√µes", "Hist√≥rico", "Resumo"])


    # ‚úíÔ∏è ABA DE AVALIA√á√ïES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    # Ativa a aba de avalia√ß√µes.
    with tabs[0]:
        _scales_loader(scales_machine, link_id)


    # üßÆ ABA DE RESULTADOS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    # Ativa a aba de resultados.
    with tabs[1]:
        st.info("O hist√≥rio de respostas ser√° implementado em breve.")


    # üß© ABA DE RELAT√ìRIOS E S√çNTESES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    # Ativa a aba de relat√≥rios e s√≠nteses.
    with tabs[2]:
        st.info("Um resumo dos resultados ser√° implementado em breve.")


# ‚úíÔ∏è FUN√á√ÉO PARA CARREGAR E SELECIONAR ESCALAS ATRIBU√çDAS AO PACIENTE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _scales_loader(scales_machine: StateMachine, link_id: str) -> None:
    """
    <docstrings> Orquestra o fluxo de carregamento, renderiza√ß√£o e finaliza√ß√£o de escalas.

    Args:
        auth_machine (StateMachine): M√°quina de estado com dados de usu√°rio.
        scales_machine (StateMachine): M√°tquina de estado com dados de escalas psicom√©tricas.
        links (list[dict]): Lista de v√≠nculos ativos do paciente. 

    Calls:
        load_links_for_patient(): Garantir v√≠nculo paciente | definida em services.professional_patient_link.
        load_available_scales(): Carrega metadados das escalas | definida em services.available_scales.
        load_scale_progress(): Busca hist√≥rico de progresso | definida em services.scales_progress.
        load_assigned_scales(): Busca escalas ativas | definida acima.
        render_pending_scales(): Renderiza formul√°rios e trata submiss√µes | definida acima.
        st.warning(), st.success(): Feedback visual | definidos em streamlit.

    Returns:
        tuple[None, str | None]: (None, mensagem de erro) ou (None, None) em sucesso.

    """

    # Carrega os dados psicom√©tricos das escalas dispon√≠veis na m√°quina de escalas.
    load_available_scales(scales_machine) 

    # Carrega as respostas das escalas atribu√≠das ao paciente (hist√≥rico).
    load_scale_progress(link_id, scales_machine)

    # Recupera as escalas atribu√≠das via UUID do v√≠nculo.
    assigned = load_assigned_scales(link_id, scales_machine) 

    # Recupera os dados psicom√©tricos das escalas dispon√≠veis no sistema.
    psych_data = scales_machine.get_variable("available_scales", default=[])

    # Se nenhuma escala foi atribu√≠da...
    if not assigned:
        st.info("Voc√™ ainda n√£o tem avalia√ß√µes atribu√≠das.")
        return # ‚¨Ö Retorna para o fluxo principal.

    # Recupera as escalas pendentes...
    pending_scales = _render_pending_scales(assigned, psych_data, link_id, scales_machine) 
    
    # Se n√£o houver escalas pendentes...
    if not pending_scales:
        st.success("‚úÖ Voc√™ j√° respondeu todas as avalia√ß√µes que lhe foram atribu√≠das.")

    # Retorna para o fluxo principal.
    return


# ‚úíÔ∏è FUN√á√ÉO PARA RENDERIZAR APENAS ESCALAS PENDENTES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _render_pending_scales(
    assigned: list[dict],
    psych_data: list[dict],
    link_id: str,
    scales_machine: StateMachine
) -> bool:
    """
    <docstrings> Renderiza escalas pendentes em sequ√™ncia com controle de progresso.

    Args:
        assigned (list[dict]): Escalas ativas atribu√≠das ao paciente (tabela `scales`).
        psych_data (list[dict]): Estruturas completas das escalas dispon√≠veis (tabela `available_scales`).
        link_id (str): UUID do v√≠nculo profissional-paciente.
        scales_machine (StateMachine): M√°quina de estado respons√°vel por armazenar progresso, respostas e estados da interface.

    Calls:
        parse_scale_items(): Converte defini√ß√£o bruta em itens | definida neste m√≥dulo.
        check_if_scale_completed_today(): Verifica se escala j√° foi respondida hoje | definida neste m√≥dulo.
        _render_scale_item_full_with_checkboxes(): Renderiza formul√°rio de resposta | definida neste m√≥dulo.
        finalize_scale_response(): Persiste respostas e atualiza progresso no backend | definida neste m√≥dulo.
        scales_machine.set_variable(): Armazena estados e respostas da interface | instanciado por StateMachine.
        st.subheader(): Exibe subt√≠tulo com o nome da escala | instanciado por streamlit.
        st.markdown(): Renderiza instru√ß√µes da escala no frontend | instanciado por streamlit.
        st.warning(): Exibe alertas de estrutura inv√°lida | instanciado por streamlit.

    Returns:
        bool: 
            - True se pelo menos uma escala pendente foi identificada e renderizada.
            - False se todas as escalas j√° foram respondidas no dia atual.
    """
    
    # Flag de controle usada para indicar se ao menos uma escala pendente foi processada.
    pending = False

    # Mapeia os metadados das escalas dispon√≠veis por seu UUID (available_scale_id).
    mapa = {d["id"]: d for d in psych_data}

    # Para cada escala atribu√≠da ao paciente...
    for scale in assigned:
        scale_id = scale["id"] # ‚¨Ö UUID da escala atribu√≠da (scales datafrane).

        # Verifica se a escala j√° foi respondida hoje; se sim, ignora.
        if check_if_scale_completed_today(scale_id, link_id, scales_machine):
            continue # ‚¨Ö Pula para a pr√≥xima escala.

        # Recupera a estrutura psicom√©trica da escala a partir do UUID das escalas dispon√≠vies.
        structure = mapa.get(scale["available_scale_id"])
        
        # Se n√£o houver uma estrutura psicom√©trica confiramda...
        if not structure:
            st.warning(f"‚ö†Ô∏è Estrutura n√£o encontrada para {scale.get('scale_name')}") # ‚¨Ö Falha de integridade: escala atribu√≠da sem defini√ß√£o.
            continue # ‚¨Ö Pula para a pr√≥xima escala.

        # Converte a estrutura bruta de itens (JSON ou dict) em lista uma lista de itens.
        itens = parse_scale_items(structure.get("items"))
        
        # Se n√£o houver itens definidos...
        if not itens:
            st.warning(f"‚ö†Ô∏è Sem itens v√°lidos para {scale.get('scale_name')}")  # ‚¨Ö Falha cr√≠tica: escala sem conte√∫do aplic√°vel.
            continue # ‚¨Ö Pula para a pr√≥xima escala.

        # Se chegou at√© aqui, a escala est√° pronta para ser exibida.
        pending = True

        # Ativa um container persistente para adicionar elementos.
        with st.container():
            
            # Renderiza o nome da escala como subt√≠tulo.
            st.subheader(scale.get("scale_name", "Escala"))

            # Renderiza instru√ß√µes da escala, se dispon√≠veis.
            st.markdown(f"**Instru√ß√µes:** {structure.get('description', '')}", unsafe_allow_html=True)

            # Define o estado da escala atual como FORM ‚Üí usado para controle reativo da interface.
            scales_machine.set_variable(f"{scale_id}__state", EvaluationStates.FORM.value)

            # Chama o renderer do formul√°rio da escala, que controla UI, submiss√£o e valida√ß√£o.
            _render_scale_item_full_with_checkboxes(
                scale_id=scale_id,
                itens=itens,
                link_id=link_id,
                scales_machine=scales_machine
            )

            # Verifica√ß√£o extra: garante que escalas finalizadas durante a submiss√£o n√£o sejam duplicadas.
            if check_if_scale_completed_today(scale_id, link_id, scales_machine):
                continue # ‚¨Ö Pula para a pr√≥xima escala.

    # Retorna True se alguma escala pendente foi encontrada e exibida; caso contr√°rio, False.
    return pending


# ‚úíÔ∏è FUN√á√ÉO PARA RENDERIZAR CHECKBOXES DINAMICAMENTE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _render_scale_item_full_with_checkboxes(
    scale_id: str,
    itens: list[dict],
    link_id: str,
    scales_machine: StateMachine
) -> None:
    """
    <docstrings> Renderiza um formul√°rio completo da escala com op√ß√µes do tipo checkbox.

    Esta fun√ß√£o √© respons√°vel por exibir os itens da escala em um formul√°rio interativo. Ap√≥s o envio,
    realiza a valida√ß√£o das respostas, exibe feedback visual ao usu√°rio e persiste temporariamente os dados
    na m√°quina de estados. Se todas as respostas forem v√°lidas, tamb√©m aciona o encerramento e salvamento da escala.

    Args:
        scale_id (str): ID da escala atribu√≠da (registro da tabela `scales`).
        itens (list[dict]): Lista de perguntas com alternativas (tipo Likert, m√∫ltipla escolha etc.).
        link_id (str): UUID do v√≠nculo profissional-paciente.
        scales_machine (StateMachine): M√°quina respons√°vel por armazenar respostas, estado da UI e progresso local.

    Calls:
        render_scale_item_ui(): Cria os checkboxes e retorna um dicion√°rio com as alternativas marcadas | definida neste m√≥dulo.
        validate_scale_responses(): Valida a estrutura das respostas para garantir que cada item tenha apenas uma alternativa marcada | definida neste m√≥dulo.
        handle_scale_submission(): Armazena as respostas v√°lidas e exibe feedback visual condicional (erro ou sucesso) | definida neste m√≥dulo.
        finalize_scale_response(): Persiste as respostas no backend e atualiza o status da escala como conclu√≠da | definida neste m√≥dulo.
        scales_machine.set_variable(): Atualiza o estado interno da escala na m√°quina de estados | instanciado por StateMachine.
        st.form_submit_button(): Cria bot√£o de envio associado ao formul√°rio | instanciado por streamlit.

    Returns:
        None: A fun√ß√£o n√£o retorna valor; sua fun√ß√£o √© puramente reativa e visual.
    """

    # Cria um formul√°rio isolado para a escala atual.
    with st.form(key=f"form_{scale_id}"):

        # Renderiza os itens da escala como checkboxes, agrupados por quest√£o.
        # Retorna um dicion√°rio bruto com as respostas selecionadas por item.
        raw_answers = render_scale_item_ui(scale_id, itens)

        # Cria o bot√£o de envio do formul√°rio.
        sent = st.form_submit_button("Salvar", use_container_width=True)

        # Se o formul√°rio for enviado...
        if sent:
            # Loga que a submiss√£o do formul√°rio foi iniciada.
            logger.debug(f"[SCALE] Formul√°rio {scale_id} enviado. Iniciando valida√ß√£o.")

            # Valida o conjunto de respostas: separa respostas v√°lidas e itens com erro (ex: n√£o respondidos).
            valid_answers, error_ids = validate_scale_responses(raw_answers)

            # Exibe feedback e persiste as respostas v√°lidas localmente (em mem√≥ria).
            success = handle_scale_submission(scale_id, valid_answers, error_ids, scales_machine)

            # Se a submiss√£o for considerada v√°lida...
            if success:
                # Armazena respostas e status local de conclus√£o na m√°quina de escalas.
                scales_machine.set_variable(f"scale_progress__{scale_id}__resp", valid_answers)
                scales_machine.set_variable(f"scale_progress__{scale_id}__done", True)

                # Persiste no backend e atualiza o estado geral da escala como finalizada.
                finalize_scale_response(scale_id, link_id, scales_machine)


# ‚úíÔ∏è FUN√á√ÉO AUXILIAR PARA RENDERIZAR A UI DE CHECKBOXES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def render_scale_item_ui(scale_id: str, itens: List[Dict]) -> Dict[str, List[str]]:
    """
    <docstrings> Renderiza os checkboxes da escala e retorna as respostas marcadas.

    Args:
        scale_id (str): ID da escala atribu√≠da.
        itens (list[dict]): Lista de perguntas.

    Returns:
        dict: Dicion√°rio com respostas por pergunta. Ex: {'1': ['A'], '2': []}
    """
    respostas = {}

    for item in itens:
        qid = str(item.get("id"))
        qtxt = item.get("question", f"Pergunta {qid}")
        options = item.get("options", [])

        st.markdown(f"**{qid}. {qtxt}**")
        selecionadas = []

        for i, option in enumerate(options):
            key = f"{scale_id}_{qid}_{i}"
            if st.checkbox(option, key=key):
                selecionadas.append(option)

        respostas[qid] = selecionadas
        st.markdown("---")

    return respostas


# ‚úíÔ∏è FUN√á√ÉO AUXILIAR PARA VALIDAR AS RESPOSTAS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def validate_scale_responses(raw_answers: dict) -> tuple[dict, list[str]]:
    """
    <docstrings> Valida as respostas brutas da escala.

    Args:
        raw_answers (dict): Dicion√°rio com respostas por item (possivelmente m√∫ltiplas).

    Returns:
        Tuple[dict, list[str]]: Respostas v√°lidas e lista de IDs com erro.
    """
    valid = {}
    erros = []

    for qid, respostas in raw_answers.items():
        if respostas:
            valid[f"question_{qid}"] = respostas[0]
        else:
            valid[f"question_{qid}"] = None
            erros.append(qid)

    return valid, erros


# ‚úíÔ∏è FUN√á√ÉO AUXILIAR PARA FEEDBACK E CONTROLE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def handle_scale_submission(
    scale_id: str,
    valid_answers: dict,
    error_ids: list[str],
    scales_machine: StateMachine
) -> bool:
    """
    <docstrings> Gerencia estado, feedback visual e armazena respostas tempor√°rias.

    Args:
        scale_id (str): ID da escala.
        valid_answers (dict): Respostas v√°lidas.
        error_ids (list[str]): Lista de IDs com erro.
        state_machine (StateMachine): M√°quina para persistir estado tempor√°rio.

    Returns:
        bool: True se pronto para submiss√£o final; False se houver erro.
    """
    feedback = st.empty()

    scales_machine.set_variable(f"{scale_id}__answers", valid_answers)
    scales_machine.set_variable(f"{scale_id}__error_ids", error_ids)

    if error_ids:
        if len(error_ids) == 1:
            feedback.error(f"‚ùå Verifique o item {error_ids[0]}.")
        else:
            joined = ", ".join(error_ids[:-1]) + " e " + error_ids[-1]
            feedback.error(f"‚ùå Verifique os itens {joined}.")
        return False

    return True


# üóÉÔ∏è FUN√á√ÉO AUXILIAR PARA CONVERTER ESTRUTURAS DE ITENS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def parse_scale_items(raw_items: dict | str) -> list[dict]:
    """
    <docstrings> Converte diferentes formatos brutos de itens de escala (dict ou string JSON) em uma lista de dicion√°rios.
    
    Essa fun√ß√£o √© utilizada para garantir que os itens da escala estejam em formato manipul√°vel (`list[dict]`),
    independentemente de como eles foram armazenados ou recebidos do banco (como string JSON ou dict aninhado).

    Args:
        raw_items (dict | str): Estrutura crua contendo os itens da escala, geralmente retornada do Supabase.

    Returns:
        list[dict]: Lista de dicion√°rios representando os itens v√°lidos da escala.
                    Retorna lista vazia em caso de erro de parsing ou tipo inesperado.

    Calls:
        isinstance(): Verifica o tipo de uma vari√°vel | built-in.
        json.loads(): Converte string JSON em objeto Python | importada do m√≥dulo json.
        dict.get(): Acessa chave 'items' de um dicion√°rio | instanciado por dict.
        logger.exception(): Registra erro com traceback | instanciado por logger.
    """

    # Tenta executar a a√ß√£o principal...
    try:

        # Se a entrada for uma string JSON...
        if isinstance(raw_items, str):
            raw_items = json.loads(raw_items) # ‚¨Ö Tenta decodificar para Python.

        # Se j√° for um dicion√°rio...
        if isinstance(raw_items, dict):
            itens = raw_items.get("items", []) # ‚¨Ö Tenta extrair a chave 'items'.
        
        # Caso contr√°rio...
        else:
            itens = []  # ‚¨Ö Cria uma lista vazia como fallback.

        # Se ainda assim os itens forem string JSON...
        if isinstance(itens, str):
            itens = json.loads(itens) # ‚¨Ö Faz novo parsing.

        # Garante que a sa√≠da seja uma lista de dicion√°rios.
        return itens if isinstance(itens, list) else []

    # Na exce√ß√£o...
    except Exception as e:

        # Loga qualquer erro no parsing com stacktrace autom√°tico.
        logger.exception(f"Erro ao parsear items da escala: {e}")
        return []  # ‚¨Ö Retorna uma lista vazia como fallback de execu√ß√£o.


# üìû FUN√á√ÉO AUXILIAR PARA REGISTAR RESPOSTAS DE ESCALAS  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def finalize_scale_response(scale_id: str, link_id: str, scales_machine: StateMachine) -> None:
    """
    <docstrings> Finaliza a resposta da escala, salva no backend e notifica o usu√°rio.

    Args:
        scale_id (str): Identificador da escala.
        link_id (str): Identificador do v√≠nculo paciente-profissional.
        auth_machine (StateMachine): M√°quina de estado para controle de progresso.

    Calls:
        save_scale_progress(): Persiste progresso da escala | definida em services.scales_progress.
        st.success(), st.error(): Feedback visual | instanciados por streamlit.

    """

    resp_key = f"scale_progress__{scale_id}__resp"
    done_key = f"scale_progress__{scale_id}__done"
    respostas = scales_machine.get_variable(resp_key, default={})
    
    if not respostas:
        return

    payload = {
        "scale_id": scale_id,
        "link_id": link_id,
        "date": str(date.today()),
        "completed": True,
        "answers": respostas
    }

    logger.debug(f"[SCALE] finalize_scale_response: Iniciando envio da escala {scale_id}")
    logger.debug(f"[SCALE] finalize_scale_response: Payload ‚Üí {payload}")

    sucesso = save_scale_progress(payload)
    if sucesso:
        scales_machine.set_variable(resp_key, {})
        scales_machine.set_variable(done_key, False)
        scales_machine.set_variable(f"scale_progress__{scale_id}__idx", 0)
        update_scale_status(scale_id, "done")
        scales_machine.to(EvaluationStates.START.value, rerun=True)


# üìû FUN√á√ÉO AUXILIAR PARA VERIFICAR SE UMA ESCALA J√Å FOI RESPONDIDA HOJE  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def check_if_scale_completed_today(scale_id: str, link_id: str, machine: StateMachine) -> bool:
    """
    <docstrings> Verifica se uma escala foi respondida hoje, com ou sem refer√™ncia ao v√≠nculo.

    Args:
        scale_id (str): ID da escala atribu√≠da.
        link_id (str): ID do v√≠nculo paciente-profissional.
        machine (StateMachine): M√°quina contendo o progresso local da escala.

    Returns:
        bool: True se a escala foi respondida hoje; False caso contr√°rio.
    """
    progresso = machine.get_variable(f"scale_progress__{scale_id}", default=[])
    hoje = str(date.today())

    for p in progresso:
        # Suporte futuro: se link_id estiver registrado no progresso, usa filtro estrito
        if "link_id" in p:
            if p["link_id"] == link_id and p.get("date") == hoje and p.get("completed"):
                return True
        # Suporte atual: assume estrutura simples sem link_id
        elif p.get("date") == hoje and p.get("completed"):
            return True

    return False


# üìû FUN√á√ÉO PARA RENDERIZAR PROGRESSOS EM ESCALAS  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def render_scale_progress_table(link_id: str, auth_machine: StateMachine) -> None:
    """
    <docstrings> Exibe uma tabela com o hist√≥rico de respostas do paciente para cada escala.

    Args:
        link_id (str): UUID do v√≠nculo paciente-profissional.
        auth_machine (StateMachine): M√°quina de estado com os dados carregados.

    Calls:
        load_scale_progress(): Carrega dados da tabela `scale_progress` | definida em services.scales_progress.
        st.dataframe(): Exibe tabela no frontend | definida em streamlit.
    """

    # For√ßa recarregamento dos dados (caso n√£o estejam carregados ainda)
    load_scale_progress(link_id=link_id, auth_machine=auth_machine)

    raw_vars = auth_machine.list_variables_with_prefix("scale_progress__")

    # Coleta todas as chaves com progresso
    progresso = []
    for v in raw_vars.values():
        if isinstance(v, list):
            progresso.extend(v)
    
    if not progresso:
        st.info("‚ö†Ô∏è Nenhum progresso registrado at√© o momento.")
        return

    # Converte para dataframe
    df = pd.DataFrame(progresso)

    # Reordena colunas, se poss√≠vel
    cols_prioritarias = ["scale_id", "date", "completed"]
    cols_ordenadas = cols_prioritarias + [c for c in df.columns if c not in cols_prioritarias]
    df = df[cols_ordenadas]

    # Renderiza
    st.subheader("üìä Hist√≥rico de Respostas")
    st.dataframe(df, use_container_width=True)