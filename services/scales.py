# üì¶ IMPORTA√á√ïES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

import logging
from services.backend import fetch_records, upsert_record
from frameworks.sm import StateMachine

logger = logging.getLogger(__name__)


# üîé FUN√á√ÉO PARA CARREGAR ESCALAS ATRIBU√çDAS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def load_scales_by_link_id(link_id: str, auth_machine: StateMachine) -> None:
    """
    <docstrings> Carrega todas as escalas atribu√≠das a um v√≠nculo profissional-paciente.

    Args:
        link_id (str): UUID do v√≠nculo.
        auth_machine (StateMachine): M√°quina de estados onde os dados ser√£o armazenados.

    Calls:
        fetch_records(): Busca escalas atribu√≠das | definida em services.backend.py.
        logger.debug(): Log de progresso | instanciado por logger.
        auth_machine.set_variable(): Armazena escalas carregadas | instanciado por StateMachine.

    Returns:
        None
    """
    logger.debug(f"SCALES ‚Üí Buscando escalas atribu√≠das ao link {link_id}")

    escalas = fetch_records(
        table_name="scales",
        filters={"link_id": link_id}
    )

    logger.debug(f"SCALES ‚Üí {len(escalas)} escala(s) carregada(s) para o link {link_id}")

    auth_machine.set_variable("assigned_scales", escalas)


# üíæ FUN√á√ÉO PARA SALVAR UMA ESCALA ATRIBU√çDA ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# üì¶ IMPORTA√á√ïES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

import logging
from services.backend import fetch_records, upsert_record

logger = logging.getLogger(__name__)


# üîé FUN√á√ÉO PARA CARREGAR ESCALAS ATRIBU√çDAS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def load_scales_by_link_id(link_id: str, auth_machine) -> None:
    """
    <docstrings> Carrega todas as escalas atribu√≠das a um v√≠nculo profissional-paciente.

    Args:
        link_id (str): UUID do v√≠nculo.
        auth_machine (StateMachine): M√°quina de estados onde os dados ser√£o armazenados.

    Returns:
        None
    """
    logger.debug(f"SCALES ‚Üí Buscando escalas atribu√≠das ao link {link_id}")

    escalas = fetch_records(
        table_name="scales",
        filters={"link_id": link_id}
    )

    logger.debug(f"SCALES ‚Üí {len(escalas)} escala(s) carregada(s) para o link {link_id}")

    auth_machine.set_variable("assigned_scales", escalas)


# üíæ FUN√á√ÉO PARA SALVAR UMA ESCALA ATRIBU√çDA ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def save_scale_assignment(data: dict) -> bool:
    """
    <docstrings> Atribui uma escala a um v√≠nculo apenas se ainda n√£o houver essa combina√ß√£o registrada.

    Args:
        data (dict): Dados da atribui√ß√£o (scale_id, scale_name, link_id).

    Returns:
        bool: True se a atribui√ß√£o foi salva com sucesso. False se j√° existia ou ocorreu erro.
    """
    try:
        scale_id = data["scale_id"]
        link_id = data["link_id"]

        # Verifica se j√° existe essa atribui√ß√£o
        existente = fetch_records(
            table_name="scales",
            filters={"scale_id": scale_id, "link_id": link_id},
            single=True
        )

        if existente:
            logger.warning(f"SCALES ‚Üí Escala {scale_id} j√° atribu√≠da ao v√≠nculo {link_id}.")
            return False

        logger.debug(f"SCALES ‚Üí Tentando salvar atribui√ß√£o de escala: {data}")

        result = upsert_record(
            table_name="scales",
            payload=data,
            returning=True  # ‚Üê sem on_conflict, pois id ser√° novo
        )

        logger.debug(f"SCALES ‚Üí Resultado do upsert: {result}")
        return bool(result)

    except Exception as e:
        logger.exception(f"SCALES ‚Üí Erro ao salvar atribui√ß√£o: {e}")
        return False
