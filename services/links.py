
# üì¶ IMPORTA√á√ïES NECESS√ÅRIAS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

import logging

from services.backend import upsert_record, fetch_records
from frameworks.sm    import StateMachine
from utils.gender import get_professional_title


# üë®‚Äçüíª LOGGER ESPEC√çFICO PARA O M√ìDULO ATUAL ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

logger = logging.getLogger(__name__)


# üîé FUN√á√ÉO PARA CARREGAR TODOS OS V√çNCULOS DE UM PROFISSIONAL ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def load_links_for_professional(professional_id: str, auth_machine: StateMachine) -> None:
    """
    <docstrings> Carrega todos os v√≠nculos de um profissional com pacientes.

    Args:
        professional_id (str): UUID do profissional.
        auth_machine (StateMachine): M√°quina de estado onde os dados ser√£o armazenados.

    Calls:
        fetch_records(): Busca registros na tabela de v√≠nculos | definida em services.backend.py.
        logger.debug(): M√©todo do objeto Logger para registrar mensagens de depura√ß√£o | instanciado por logger.
        auth_machine.set_variable(): Armazena os dados recuperados na m√°quina de estado | instanciado por StateMachine.

    Returns:
        None.

    """

    # Loga a tentativa de busca de v√≠nculos.
    logger.debug(f"üîé links ‚Üí Buscando v√≠nculos do profissional {professional_id}")

    # Realiza a busca dos v√≠nculos existentes na tabela.
    links = fetch_records(
        table_name="links",
        filters={"professional_id": professional_id}
    )

    # Loga o n√∫mero de v√≠nculos encontrados.
    logger.debug(f"LINK ‚Üí {len(links)} v√≠nculo(s) encontrado(s)")

    # Salva os v√≠nculos na m√°quina de estados.
    auth_machine.set_variable("linkss", links)


# üîé FUN√á√ÉO PARA CARREGAR TODOS OS V√çNCULOS DE UM PACIENTE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def load_links_for_patient(patient_id: str, auth_machine: StateMachine) -> None:
    """
    <docstrings> Carrega todos os v√≠nculos do paciente com profissionais cadastrados.

    Args:
        patient_id (str): UUID do paciente.
        auth_machine (StateMachine): M√°quina de estado onde os dados ser√£o armazenados.

    Calls:
        fetch_records(): Busca registros na tabela de v√≠nculos | definida em services.backend.py.
        logger.debug(): M√©todo do objeto Logger para registrar mensagens de depura√ß√£o | instanciado por logger.
        auth_machine.set_variable(): Armazena os dados recuperados na m√°quina de estado | instanciado por StateMachine.

    Returns:
        None.

    """

    # Loga a tentativa de busca dos v√≠nculos do paciente.
    logger.debug(f"LINK ‚Üí Buscando v√≠nculos do paciente {patient_id}")

    # Realiza a busca na tabela com filtro por patient_id.
    links = fetch_records(
        table_name="links",
        filters={"patient_id": patient_id}
    )

    # Loga o n√∫mero de v√≠nculos encontrados.
    logger.debug(f"LINK ‚Üí {len(links)} v√≠nculo(s) encontrado(s) para o paciente")

    # Armazena os v√≠nculos na m√°quina de estados.
    auth_machine.set_variable("patient_links", links)




# üîé FUN√á√ÉO PARA CARREGAR V√çNCULOS DE UM USU√ÅRIO  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def load_links_by_role(
    role_id: str,
    role_field: str,
    auth_machine: StateMachine,
    variable_name: str = "links"
) -> None:
    """
    <docstrings> Carrega v√≠nculos a partir do papel (role) ‚Äî profissional ou paciente.

    Args:
        role_id (str): UUID do usu√°rio (patient_id ou professional_id).
        role_field (str): Campo a ser filtrado ('patient_id' ou 'professional_id').
        auth_machine (StateMachine): M√°quina de estado onde os dados ser√£o armazenados.
        variable_name (str, optional): Nome da vari√°vel na m√°quina. Default √© 'links'.

    Calls:
        fetch_records(): Busca registros na tabela 'links' | definida em services.backend.py.
        logger.debug(): M√©todo para log de depura√ß√£o | instanciado por logger.
        auth_machine.set_variable(): Armazena os dados na m√°quina de estado | instanciado por StateMachine.

    Returns:
        None.
    """

    logger.debug(f"LINK ‚Üí Buscando v√≠nculos onde {role_field} = {role_id}")

    links = fetch_records(
        table_name="links",
        filters={role_field: role_id}
    )

    logger.debug(f"LINK ‚Üí {len(links)} v√≠nculo(s) encontrado(s) para {role_field} {role_id}")

    auth_machine.set_variable(variable_name, links)


# üîé FUN√á√ÉO PARA BUSCAR PERFIL DE PACIENTE POR EMAIL ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def fetch_patient_info_by_email(email: str) -> dict | None:
    """
    <docstrings> Busca os dados de perfil de um paciente a partir do seu endere√ßo de e-mail.

    Essa fun√ß√£o consulta a tabela `user_profile` no Supabase para localizar um paciente pelo campo `email`.
    Retorna um dicion√°rio com os campos essenciais para cria√ß√£o de v√≠nculo (UUID e nome), ou None caso n√£o encontrado.

    Args:
        email (str): Endere√ßo de e-mail do paciente a ser buscado.

    Calls:
        fetch_records(): Fun√ß√£o CRUD para buscas no backend | definida em services.backend.py.
        logger.debug(): M√©todo do objeto Logger para registrar mensagens de depura√ß√£o | instanciado por logger.
        logger.exception(): M√©todo do objeto Logger para registrar falhas e stacktrace | instanciado por logger.

    Returns:
        dict | None:
            - dict contendo `auth_user_id` e `display_name`, caso o paciente exista.
            - None, caso o email n√£o seja localizado ou ocorra erro.
    """

    try:
        # Loga tentativa de busca por email.
        logger.debug(f"PATIENT_LOOKUP ‚Üí Buscando paciente pelo e-mail: {email}")

        # Executa a busca na tabela de perfis com filtro por email, retornando √∫nico registro.
        result = fetch_records(
            table_name="user_profile",
            filters={"email": email},
            single=True
        )

        # Loga o resultado da opera√ß√£o.
        logger.debug(f"PATIENT_LOOKUP ‚Üí Resultado da busca: {result}")

        # Se algo foi retornado, extrai apenas os dados necess√°rios.
        if result:
            return {
                "auth_user_id": result.get("auth_user_id"),
                "display_name": result.get("display_name")
            }

        # Caso o resultado seja vazio, retorna None explicitamente.
        return None

    except Exception as e:
        # Loga o erro com traceback.
        logger.exception(f"PATIENT_LOOKUP ‚Üí Erro ao buscar paciente por e-mail: {e}")
        return None


# üíæ FUN√á√ÉO PARA SALVAR V√çNCULO ENTRE PROFISSIONAL E PACIENTE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def save_links(auth_machine: StateMachine, data: dict) -> bool:
    """
    <docstrings> Insere ou atualiza o v√≠nculo entre profissional e paciente, incluindo o nome do profissional com t√≠tulo.

    Essa fun√ß√£o √© utilizada pelo profissional para convidar um paciente.  
    O `professional_name` √© gerado dinamicamente com base no g√™nero e nome, usando a fun√ß√£o `get_professional_title()`.

    Args:
        auth_machine (StateMachine): M√°quina de estado contendo os dados do profissional autenticado.
        data (dict): Dados do v√≠nculo (ex: patient_id, patient_name, status).

    Calls:
        auth_machine.get_variable(): Recupera dados do profissional autenticado | instanciado por StateMachine.
        get_professional_title(): Gera t√≠tulo personalizado com base no g√™nero | definida em utils.gender.py.
        upsert_record(): Salva ou atualiza o v√≠nculo no Supabase | definida em services.backend.py.
        logger.debug(): Loga a√ß√µes de fluxo normal | instanciado por logger.
        logger.exception(): Loga falhas com traceback | instanciado por logger.

    Returns:
        bool: True se o v√≠nculo foi salvo com sucesso, False como fallback.
    """
    try:
        # Recupera dados do profissional autenticado
        professional_id = auth_machine.get_variable("user_id")
        profile = auth_machine.get_variable("professional_profile") or {}
        display_name = profile.get("display_name") or "Profissional"
        gender = profile.get("gender") or "M"

        professional_profile = {"display_name": display_name}
        user_profile = {"gender": gender}

        # Gera t√≠tulo com base no g√™nero e nome
        professional_name = get_professional_title(professional_profile, user_profile)

        # Prepara payload com ID e nome com t√≠tulo
        payload = {
            "professional_id": professional_id,
            "professional_name": professional_name,
            **data
        }

        # Loga o payload de grava√ß√£o
        logger.debug(f"LINK ‚Üí Tentando salvar v√≠nculo: {payload}")

        # Executa o upsert no Supabase
        result = upsert_record(
            table_name="links",
            payload=payload,
            on_conflict="professional_id,patient_id",
            returning=True
        )

        # Loga resultado da opera√ß√£o
        logger.debug(f"LINK ‚Üí Resultado da opera√ß√£o: {result}")

        # Retorna True se o upsert foi bem-sucedido
        return bool(result)

    except Exception as e:
        logger.exception(f"LINK ‚Üí Erro ao salvar v√≠nculo: {e}")
        return False


# ‚úÖ FUN√á√ÉO PARA ACEITAR UM V√çNCULO PENDENTE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def accept_link(link_id: str) -> bool:
    """
    <docstrings> Atualiza o status de um v√≠nculo entre profissional e paciente para "accepted".

    Essa fun√ß√£o √© chamada quando o paciente clica em "Aceitar" um convite.  
    Ela atualiza o registro na tabela `links`, garantindo persist√™ncia via `upsert`.

    Args:
        link_id (str): UUID do v√≠nculo entre profissional e paciente.

    Calls:
        upsert_record(): Fun√ß√£o CRUD para inser√ß√£o/atualiza√ß√£o no backend | definida em services.backend.py.
        logger.debug(): M√©todo do objeto Logger para registrar fluxo | instanciado por logger.
        logger.exception(): M√©todo para registrar falhas com traceback | instanciado por logger.

    Returns:
        bool:
            - True se o status foi atualizado com sucesso.
            - False se ocorreu erro durante a opera√ß√£o.
    """

    try:
        # Loga o in√≠cio da opera√ß√£o
        logger.debug(f"LINK ‚Üí Aceitando v√≠nculo com ID: {link_id}")

        # Define o payload de atualiza√ß√£o
        payload = {
            "id": link_id,
            "status": "accepted"
        }

        # Executa o upsert no Supabase
        result = upsert_record(
            table_name="links",
            payload=payload,
            on_conflict="id",
            returning=True
        )

        # Loga o retorno do Supabase
        logger.debug(f"LINK ‚Üí Resultado da aceita√ß√£o: {result}")

        # Retorna sucesso se houve retorno
        return bool(result)

    except Exception as e:
        # Loga o erro com traceback completo
        logger.exception(f"LINK ‚Üí Erro ao aceitar v√≠nculo: {e}")
        return False
    

# ‚ùå FUN√á√ÉO PARA RECUSAR UM V√çNCULO PENDENTE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def reject_link(link_id: str) -> bool:
    """
    <docstrings> Atualiza o status de um v√≠nculo para "rejected" quando o paciente recusa o convite.

    Essa fun√ß√£o preserva o v√≠nculo no banco de dados, marcando-o como recusado ao inv√©s de delet√°-lo.
    Ideal para manter hist√≥rico de intera√ß√µes entre profissionais e pacientes.

    Args:
        link_id (str): UUID do v√≠nculo entre profissional e paciente.

    Calls:
        upsert_record(): Atualiza o status no backend | definida em services.backend.py.
        logger.debug(): Registra fluxo de execu√ß√£o | instanciado por logger.
        logger.exception(): Captura erros com traceback completo | instanciado por logger.

    Returns:
        bool:
            - True se o status foi atualizado com sucesso.
            - False em caso de erro.
    """
    try:
        # Loga a inten√ß√£o da opera√ß√£o
        logger.debug(f"LINK ‚Üí Recusando v√≠nculo com ID: {link_id}")

        # Define o payload de atualiza√ß√£o
        payload = {
            "id": link_id,
            "status": "rejected"
        }

        # Executa o upsert para marcar como rejeitado
        result = upsert_record(
            table_name="links",
            payload=payload,
            on_conflict="id",
            returning=True
        )

        logger.debug(f"LINK ‚Üí Resultado da recusa: {result}")
        return bool(result)

    except Exception as e:
        logger.exception(f"LINK ‚Üí Erro ao rejeitar v√≠nculo: {e}")
        return False