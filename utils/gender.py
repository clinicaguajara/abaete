# üì¶ IMPORTA√á√ïES NECESS√ÅRIAS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

import logging
import re
import streamlit as st

from frameworks.sm import StateMachine


# üë®‚Äçüíª LOGGER LOCAL ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

logger = logging.getLogger(__name__)


# ü©∫ FUN√á√ÉO QUE GERA T√çTULO FORMAL COM BASE NO G√äNERO ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def get_professional_title(professional_profile: dict, user_profile: dict) -> str:
    """
    <docstrings> Retorna o t√≠tulo formal com base no g√™nero armazenado no perfil do usu√°rio,
    usando o nome de exibi√ß√£o definido pelo profissional.

    Args:
        professional_profile (dict): Cont√©m 'display_name' (nome p√∫blico do profissional).
        user_profile (dict): Cont√©m 'gender' do usu√°rio autenticado.

    Calls:
        dict.get(): M√©todo do objeto dict para acessar chaves com fallback | instanciado por ambos os perfis.
        logger.debug(): Loga o t√≠tulo gerado e o g√™nero usado | instanciado por logger.

    Returns:
        str:
            T√≠tulo completo com prefixo (Dr., Dra., Drx.) e nome.
            Exemplo: "Dra. Juliana", "Drx. Alex", "Dr. Henrique"
    """
    
    name = professional_profile.get("display_name", "Profissional")
    gender = user_profile.get("gender", "M")

    # Verifica o g√™nero para definir o t√≠tulo apropriado ‚Üí
    if gender == "F":
        title = "Dra."  # ‚Üí feminino
    elif gender == "N":
        title = "Drx."  # ‚Üí n√£o-bin√°rio
    else:
        title = "Dr."   # ‚Üí masculino (default)

    logger.debug(f"T√≠tulo gerado: {title} {name} (g√™nero='{gender}')")
    return f"{title} {name}"


# ‚ôÄÔ∏è FUN√á√ÉO PARA AJUSTAR TERMINA√á√ÉO GRAMATICAL ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def adjust_gender_ending(text: str, gender: str) -> str:
    """
    <docstrings> Ajusta sufixos gramaticais como "o"/"os" com base no g√™nero informado.

    Args:
        text (str): Palavra ou express√£o que deve ser flexionada.
        gender (str): G√™nero do usu√°rio ("M", "F" ou "N").

    Calls:
        str.strip(): Remove espa√ßos laterais | built-in.
        str.upper(): Converte o g√™nero para caixa alta | built-in.
        re.search(): Verifica presen√ßa de padr√µes gramaticais | definida em re.
        re.sub(): Substitui os padr√µes localizados | definida em re.
        logger.debug(): Loga se o g√™nero for inv√°lido ou n√£o reconhecido | instanciado por logger.

    Returns:
        str:
            Palavra ou express√£o com termina√ß√£o flexionada.
            Retorna o texto original se o g√™nero for inv√°lido.
    """
    gender = gender.strip().upper()

    SUB = {
        "M": {"o": "o", "os": "os"},
        "F": {"o": "a", "os": "as"},
        "N": {"o": "e", "os": "es"}
    }

    # G√™nero n√£o reconhecido ‚Üí
    if gender not in SUB:
        logger.debug(f"G√™nero n√£o reconhecido: {gender}.")
        return text

    # Texto no plural ‚Üí
    if re.search(r"os\b", text):
        return re.sub(r"os\b", SUB[gender]["os"], text)

    # Texto no singular ‚Üí
    if re.search(r"o\b", text):
        return re.sub(r"o\b", SUB[gender]["o"], text)

    return text


# üßë‚Äçüíº FUN√á√ÉO PARA RENDERIZAR CABE√áALHO ADAPTADO ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def render_header_by_role(auth_machine: StateMachine) -> None:
    """
    <docstrings> Exibe uma sauda√ß√£o personalizada no cabe√ßalho da interface com base
    no perfil do usu√°rio e, se aplic√°vel, no t√≠tulo profissional adaptado ao g√™nero.

    Args:
        sm (StateMachine): Inst√¢ncia da m√°quina de estado `auth_state`.

    Calls:
        sm.get_variable(): Recupera 'professional_profile' e 'user_profile' do estado | definida em frameworks.sm.py.
        get_professional_title(): Gera o t√≠tulo com base em nome e g√™nero | definida neste m√≥dulo.
        adjust_gender_ending(): Ajusta a sauda√ß√£o textual ao g√™nero | definida neste m√≥dulo.
        st.markdown(): Renderiza o cabe√ßalho no front-end | definida em streamlit.

    Returns:
        None:
            Exibe o cabe√ßalho na interface Streamlit.
    """
    prof = auth_machine.get_variable("professional_profile")
    user = auth_machine.get_variable("user_profile")

    # Usu√°rio com perfil profissional ativo ‚Üí
    if prof and prof.get("professional_status") is True:
        genero = user.get("gender", "M")
        helloworld = adjust_gender_ending("Bem-vindo", genero)
        header = get_professional_title(prof, user)
        st.markdown(f"#### {helloworld}, {header}!")

    # Usu√°rio comum (paciente) ‚Üí
    elif user:
        nome_completo = user.get("display_name", "Usu√°rio")
        primeiro_nome = nome_completo.split(" ")[0] if nome_completo else "Usu√°rio"
        genero = user.get("gender", "M")
        helloworld = adjust_gender_ending("Bem-vindo", genero)
        st.markdown(f"#### {helloworld}, {primeiro_nome}!")

    # Caso nenhum dado esteja dispon√≠vel ‚Üí
    else:
        st.markdown("## Ol√°!")
